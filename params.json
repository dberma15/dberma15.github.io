{"name":"Dberma15.GitHub.io","tagline":"","body":"### Final Project for Practical Machine Learning Coursera Course\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement – a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset). \r\n\r\n\r\n###Data Source\r\nThe training data for this project are available here:\r\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\r\n\r\nThe test data are available here:\r\nhttps://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\r\n\r\nThe data for this project comes from this original source: http://groupware.les.inf.puc-rio.br/har. If you use the document you create for this class for any purpose please cite them as they have been very generous in allowing their data to be used for this kind of assignment.\r\n\r\nThe code presented in this document assumes the user has already downloaded and saved the data without changing the file names. The user must change the main directory such that the files are there. If the user has changed the file names, it must be reflected in the code.\r\n\r\n###Goal\r\nThe goal of your project is to predict the manner in which they did the exercise. This is the “classe” variable in the training set. You may use any of the other variables to predict with. You should create a report describing how you built your model, how you used cross validation, what you think the expected out of sample error is, and why you made the choices you did. You will also use your prediction model to predict 20 different test cases.\r\n1.\tYour submission should consist of a link to a Github repo with your R markdown and compiled HTML file describing your analysis. Please constrain the text of the writeup to < 2000 words and the number of figures to be less than 5. It will make it easier for the graders if you submit a repo with a gh-pages branch so the HTML page can be viewed online (and you always want to make it easy on graders :-).\r\n2.\tYou should also apply your machine learning algorithm to the 20 test cases available in the test data above. Please submit your predictions in appropriate format to the programming assignment for automated grading. See the programming assignment for additional details.\r\n###Required Packages\r\nThis code was written in R and requires the use of a number of packages. These can be installed using install.packages(“”). The following packages were loaded: caret, rpart, rpart.plot, rattle, and randomForest.\r\n###ANALYSIS\r\n###Preparation\r\nThe analysis of this data begins by loading the relevant files into R and setting a seed to ensure reproducibility: \r\n```\r\nsetwd('C:/Users/daniel/Documents/R')\r\npml.data<-read.csv('pml-training.csv')\r\npml.validation<-read.csv('pml-testing.csv')\r\n\r\nlibrary(caret)\r\nlibrary(rpart)\r\nlibrary(rpart.plot)\r\nlibrary(rattle)\r\nlibrary(randomForest)\r\nset.seed(25841)\r\n```\r\nThere are two sets of data, a training set and a test set. However, we will use the test set for validation and partition the training set into two parts, a training and a test set. Using createDataPartition, 60% of the data is used for the training set and 40% is used for the test set.\r\n```\r\ninTrain<-createDataPartition(y=pml.data$classe, p=.6, list=FALSE)\r\npml.training<-pml.data[inTrain,]\r\npml.test<-pml.data[-inTrain,]\r\n```\r\n###Preprocessing \r\nThere were three primary steps performed in preprocessing the data. The first was removing columns that were indexing or labeling in nature, containing no meaningful data. These were the first five columns containing an indexing variable, a variable that indicates the name of the subject, and three time stamp variables. \r\n```\r\n#CLEANING STEP 1: Remove the first five column since they contain useless information\r\nlabelingColumns<-c(1:6) #these include names of individuals, time stamps and indexing.\r\npml.training<-pml.training[,-labelingColumns]\r\n```\r\nThe second step is to remove columns that contain near zero variance. The reason for doing this is that these variables contain no useful information. This is achieved by using the nearZeroVar() function in the caret package. \r\n```\r\n  #CLEANING STEP 2: Remove all the NZV variables using nearZeroVar to remove all variables with very low variance\r\n  pml.training.NZV<-nearZeroVar(pml.training, saveMetrics=TRUE)\r\n  pml.trainingNoNZV<-pml.training[,!pml.training.NZV$nzv]\r\n```\r\nThe third step is to remove variables that contain a significant number of NA (not available) entries, indicating that no data was recorded. These are removed because any entries that contain data might provide information for modeling, but are less useful in prediction because while some entries may contain information, the high portion of NAs would make it a poor predictor. The threshold for elimination was more than 60% of entries in a variable being NA.\r\n```\r\n  #CLEANING STEP 3: Remove columns with more than 60% NA as these likely do not contain useful information\r\n  isNA.pml.trainingNoNZV<-is.na(pml.trainingNoNZV)\r\n  dataNumber<-dim(pml.trainingNoNZV)[1]\r\n  percentNA<-colSums(isNA.pml.trainingNoNZV)/dataNumber\r\n  notNArows<-percentNA<.6\r\n  pml.training.NoNZV.NoNA<-pml.trainingNoNZV[,notNArows]\r\n```\r\nThe fourth step involves using Principal Component Analysis to remove the highly correlated variables. This was done using the preProcess() function in Caret.\r\n```\r\n  #CLEANING STEP 4: This step uses PCA to remove correlated columns\r\n  preProc<-preProcess(pml.training.NoNZV.NoNA[,-53], method=\"pca\")\r\n  trainingPreProc<-predict(preProc,pml.training.NoNZV.NoNA[,-53])\r\n  trainingPreProc$classe<-pml.training.NoNZV.NoNA$classe\r\n```\r\n\r\nThe preprocessing of the test and validation data eliminates the same variables:\r\n```\r\n#Perform these cleaning steps on the test set and the validation set.\r\npml.test<-pml.test[,-labelingColumns]\r\npml.testNoNZV<-pml.test[,!pml.training.NZV$nzv]\r\npml.testNoNZV.NoNA<-pml.testNoNZV[,notNArows]\r\ntestPreProc<-predict(preProc,pml.test.NoNZV.NoNA[,-53])\r\ntestPreProc$classe<-pml.test.NoNZV.NoNA$classe\r\n\r\npml.validation<-pml.validation[,-labelingColumns]\r\npml.validationNoNZV<-pml.validation[,!pml.training.NZV$nzv]\r\npml.validationNoNZV.NoNA<-pml.validationNoNZV[,notNArows]\r\nvalidationPreProc<-predict(preProc,pml.validation.NoNZV.NoNA[,-53])\r\nvalidationPreProc[,(length(validationPreProc)+1)]<-pml.validation.NoNZV.NoNA[,53]\r\n```\r\n\r\n###Building the Model\r\nTo find the best method for classifying behavior, three different models were created. The first method creates decision trees using rpart. \r\n```\r\n  #model 1: uses rpart to create a decision tree \r\n  modelFit<-rpart(classe~., data=trainingPreProc, method=\"class\") #\r\n ```\r\nThis was used to make predictions about both training data and the test data, with the results generated using the confusionMatrix() function. The results for the training and test data are as follows:\r\n\r\n```\r\n    predictions.training<-predict(modelFit, trainingPreProc, type=\"class\")\r\n    confusionMatrix.rpart.training<-confusionMatrix(predictions.training, trainingPreProc$classe)    confusionMatrix.rpart.training$overall\r\n# Accuracy          Kappa  AccuracyLower  AccuracyUpper   AccuracyNull AccuracyPValue  McnemarPValue \r\n  5.146060e-01   3.813904e-01   5.055340e-01   5.236707e-01   2.843071e-01   0.000000e+00  2.221730e-243 \r\n\r\n    predictions.test<-predict(modelFit, testPreProc, type=\"class\")\r\n    confusionMatrix.rpart.test<-confusionMatrix.rpart.test<-confusionMatrix(predictions.test, testPreProc$classe)\r\nconfusionMatrix.rpart.test$overall\r\n\r\n# Accuracy          Kappa  AccuracyLower  AccuracyUpper   AccuracyNull AccuracyPValue  McnemarPValue \r\n  4.810094e-01   3.398806e-01   4.698989e-01   4.921340e-01   2.844762e-01  1.657964e-295  1.514755e-158 \r\n ```\r\nAs expected, the test set is only slightly less accurate than the training set, making it somewhat generalizable. However, given that the training set had an accuracy of 51.46%, compared to the test set, which had an accuracy of 48.1%, the model does not predict the class very well.\r\nThe second and third models use the random forest method. The difference between them is that the second model uses the data from the PCA preprocessing and the third model uses the data before it was preprocessed using PCA.\r\n```\r\n#model 2: uses random forest to create decision trees\r\n  modelFit2<-randomForest(formula=classe~., data=trainingPreProc) \r\n  modelFit3<-randomForest(formula=classe~., data=pml.training.NoNZV.NoNA)\r\n```\r\nAs before, the results of this model for the training and test sets are shown using the confusionMatrix() function:\r\n```\r\n#MODEL 2 (PCA)\r\n#\r\npredictionsRF.training<-predict(modelFit2, pml.training.NoNZV.NoNA, type=\"class\")\r\nconfusionMatrix.RF.training<-confusionMatrix(predictionsRF.training, pml.training.NoNZV.NoNA$classe)\r\nconfusionMatrix.RF.training$overall\r\n# Accuracy          Kappa  AccuracyLower  AccuracyUpper   AccuracyNull AccuracyPValue  McnemarPValue \r\n     1.0000000      1.0000000      0.9996868      1.0000000      0.2843071      0.0000000            NaN\r\n\r\npredictionsRF.test<-predict(modelFit2, pml.test.NoNZV.NoNA, type=\"class\")\r\nconfusionMatrix.RF.test<-confusionMatrix(predictionsRF.test, pml.test.NoNZV.NoNA$classe) confusionMatrix.RF.test$overall\r\n\r\n# Accuracy          Kappa  AccuracyLower  AccuracyUpper   AccuracyNull AccuracyPValue  McnemarPValue \r\n  9.729799e-01   9.658152e-01   9.691479e-01   9.764547e-01   2.844762e-01   0.000000e+00   1.330981e-12\r\n\r\n\r\n\r\n#Model 3 (No PCA)\r\n#\r\npredictionsRF.training3<-predict(modelFit3, pml.training.NoNZV.NoNA, type=\"class\")\r\nconfusionMatrix.RF.training3<-confusionMatrix(predictionsRF.training3, pml.training.NoNZV.NoNA$classe)\r\nconfusionMatrix.RF.training3$overall\r\nAccuracy          Kappa  AccuracyLower  AccuracyUpper   AccuracyNull AccuracyPValue  McnemarPValue \r\n     1.0000000      1.0000000      0.9996868      1.0000000      0.2843071      0.0000000            NaN\r\n\r\npredictionsRF.test3<-predict(modelFit3, pml.test.NoNZV.NoNA, type=\"class\")\r\nconfusionMatrix.RF.test3<-confusionMatrix(predictionsRF.test3, pml.test.NoNZV.NoNA$classe) \r\nconfusionMatrix.RF.test3$overall\r\nAccuracy          Kappa  AccuracyLower  AccuracyUpper   AccuracyNull AccuracyPValue  McnemarPValue \r\n     0.9945195      0.9930673      0.9926248      0.9960310      0.2844762      0.0000000            NaN\r\n```\r\nAgain, the training set predictions are better than the test set predictions for both models two and three. However, the test set predictions are 97.3% accurate for the PCA preprocessed data and 99.45% accurate for the complete data. Therefore, both models are very generalizable, but we will use the complete data set, modelFit3, for making predictions about the validation set, rather than the PCA preprocessed model. \r\n###Predictions\r\nWe can then use the random forest model on the validation data to predict what the possible classes the 20 cases belong to. \r\n```\r\npredictionsRF.validation<-predict(modelFit3, pml.validation.NoNZV.NoNA, type=\"class\")\r\n```\r\nWhich returns the results:\r\n```\r\npredictionsRF.Validation\r\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 \r\n B  A  B  A  A  E  D  B  A  A  B  C  B  A  E  E  A  B  B  B.\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}